apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
  labels:
    app.kubernetesio/name: client
    app.kubernetes.io/version: v1
    app.kubernetes.io/instance: client
    tags.datadoghq.com/env: snd
    tags.datadoghq.com/service: client
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetesio/name: client
      app.kubernetes.io/version: v1
      app.kubernetes.io/instance: client
      tags.datadoghq.com/env: snd
      tags.datadoghq.com/service: client
      tags.datadoghq.com/version: v1
  template:
    metadata:
      annotations:
        prometheus.istio.io/merge-metrics: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
      labels:
        tags.datadoghq.com/env: snd
        tags.datadoghq.com/service: client
        tags.datadoghq.com/version: v1
        app.kubernetesio/name: client
        app.kubernetes.io/version: v1
        app.kubernetes.io/instance: client
        sidecar.istio.io/inject: "true"
    spec:
      volumes:
        - hostPath:
            path: /var/run/datadog/
          name: apmsocketpath
      serviceAccountName: client-service-account
      containers:
        - name: client-container
          image: golang-client:v1
          ports:
            - name: client-port
              containerPort: 3000
          volumeMounts:
            - name: apmsocketpath
              mountPath: /var/run/datadog

---
apiVersion: v1
kind: Service
metadata:
  name: client
  labels:
    app: client
    service: client
spec:
  selector:
    app.kubernetesio/name: client
    app.kubernetes.io/version: v1
    app.kubernetes.io/instance: client
  ports:
    - port: 3000
      name: http
      #default is TCP
      appProtocol: http
      protocol: TCP
      targetPort: 3000
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: client-service-account
  labels:
    account: client
automountServiceAccountToken: true

---
